1.Find length of an array

#include <iostream>
using namespace std;
 
int main() {
	int arr[]={8,2,3,4,6,7,0};
	int size=sizeof(arr)/sizeof(arr[0]);
	cout<<"size of array is: "<<size;
}


2. Reverse the array
#include <iostream>
using namespace std;
void reverse(int arr[], int n)
{
	int start=0;
	int end=n-1;
	while(start<end)
	{
		swap(arr[start],arr[end]);
		start++;
		end--;
	}
}
int main() {
	int n;
	cin>> n;
	int arr[n];
	for(int i=0;i<n;i++)
	{
		cin>>arr[i];
	}
	reverse(arr,n);
	for(int i=0;i<n;i++)
	{
		cout<<arr[i]<<" ";
	}
	return 0;
}

3. Find the maximum and minimum element in an array
#include <iostream>
#include <climits>
using namespace std;
 
int main() {
	int n;
	cin>>n;
	int arr[n];
	for(int i=0;i<n;i++)
	{
		cin>>arr[i];
	}
	int min=INT_MAX;
	int max=INT_MIN;
 
	for(int i=0;i<n;i++)
	{
		if(arr[i]>max)
		{
			max=arr[i];
		}
		if(arr[i]<min)
		{
			min=arr[i];
		}
	}
	cout<<"max: "<< max<<endl;
	cout<<"min: "<< min<<endl;
 
	return 0;
}

4. Find the "Kth" max and min element of an array
#include <bits/stdc++.h>

using namespace std;

int main() {
	int n;
	cin>>n;
	int arr[n];
	for(int i=0;i<n;i++)
	{
		cin>>arr[i];
		
	}
	int k;
	cin>>k;
	sort(arr,arr+n);
	cout<<"k th smallest:"<<arr[k-1]<<endl;
	cout<<"k th largest:"<<arr[n-k]<<endl;
	
	return 0;
}

5. Given an array which consists of only 0, 1 and 2. Sort the array without using any sorting algo
#include <iostream>
using namespace std;
 
int main() {
	int n;
	cin>>n;
	int arr[n];
	for(int i=0;i<n;i++)
	{
		cin>>arr[i];
 
	}
	int count0=0;
	int count1=0;
	for(int i=0;i<n;i++)
	{
		if(arr[i]==0)
		{
			count0++;
		}
		if(arr[i]==1)
		{
			count1++;
		}
	}
	int i=0;
	for(i=0;i<count0;i++)
	{
		arr[i]=0;
	}
 
	for(i=count0;i<count0+count1;i++)
	{
		arr[i]=1;
	}
 
	for(i=count0+count1;i<n;i++)
	{
		arr[i]=2;
	}
 
 
	for(int i=0;i<n;i++)
	{
		cout<<arr[i]<<" ";
 
	}
	return 0;
}

6. Move all the negative elements to one side of the array

#include <iostream>
using namespace std;
 
int main() {
	int n;
	cin>>n;
	int arr[n];
	for(int i=0;i<n;i++)
	{
		cin>>arr[i];
 
	}
	int l=0;
	int k=n-1;
	while(l<=k)
	{
		if(arr[l]<0)
		{
			swap(arr[l],arr[k]);
			k--;
		}
		if(arr[l]>=0)
		{
			l++;
		}
 
	}
	for(int i=0;i<n;i++)
	{
		cout<<arr[i]<<" ";
	}
	return 0;
}

7. Find the Union and Intersection of the two sorted arrays.
#include <iostream>
using namespace std;
void printUnion(int arr1[], int arr2[], int m, int n)
{
    int i = 0, j = 0;
    while (i < m && j < n) {
        if (arr1[i] < arr2[j])
            cout << arr1[i++] << " ";
 
        else if (arr2[j] < arr1[i])
            cout << arr2[j++] << " ";
 
        else {
            cout << arr2[j++] << " ";
            i++;
        }
    }
 
    while (i < m)
        cout << arr1[i++] << " ";
 
    while (j < n)
        cout << arr2[j++] << " ";
}
void printIntersection(int arr1[], int arr2[], int m, int n)
{
    int i = 0, j = 0;
    while (i < m && j < n) {
        if (arr1[i] < arr2[j])
            i++;
        else if (arr2[j] < arr1[i])
            j++;
        else
        {
            cout << arr2[j] << " ";
            i++;
            j++;
        }
    }
}
int main() {
	int n,m;
	cin>>n>>m;
	int arr1[n];
	for(int i=0;i<n;i++)
	{
		cin>>arr1[i];
 
	}
 
	int arr2[m];
	for(int j=0;j<m;j++)
	{
		cin>>arr2[j];
 
	}
 
	cout<<"union:";
	printUnion(arr1,arr2,n,m);
	cout<<"intersection:";
	printIntersection(arr1,arr2,n,m);
 
 
	return 0;
}

8. Given an array of digits check if the array is palindrome or not.
#include <iostream>
using namespace std;
bool check(int arr[],int n)
{
	int l=0;
	int r=n-1;
	while(l<r)
	{
		if(arr[l]!=arr[r])
		{
			return false;
		}
		l++;
		r--;
	}
	return true;
}
 
int main() {
	int n;
	cin>>n;
	int arr[n];
	for(int i=0;i<n;i++)
	{
		cin>>arr[i];
 
	}
	cout<< check(arr,n);
 
	return 0;
}
